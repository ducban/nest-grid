$totalColumns: 12;
$gutterWidth: 30;
$columnWidth: 60;

$maxWidth: ( ($totalColumns * $columnWidth) + ( ($totalColumns) * $gutterWidth) );

$columnWidthPercent: (100% / $totalColumns) * ( $columnWidth / ($columnWidth + $gutterWidth) );
$gutterWidthPercent: (100% / $maxWidth ) * $gutterWidth;

* { 
  -webkit-box-sizing: border-box;
     -moz-box-sizing: border-box;
          box-sizing: border-box;
}
.container {
  max-width: $maxWidth + px;
  margin: 0 auto;
  padding: 0 ($gutterWidth/2)+px;
  -webkit-box-sizing: content-box;
     -moz-box-sizing: content-box;
          box-sizing: content-box;
  // ^ this allows padding to be added and percentages to be calulated correctly
}
.container.fixedWidth { width: $maxWidth + px; }

.column, .columns {
  float: left;
  *display: inline;
  margin: 0 ($gutterWidthPercent / 2);
}
.column.first, .columns.first { margin-left: 0 !important; }
.column.last, .columns.last { margin-right: 0 !important; }

/* Micro Clearfix on Row & Container */
.row:before,
.row:after,
.container:before,
.container:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}
.row:after,
.container:after { clear: both; }
.row, 
.container { *zoom: 1; }

.row { margin-bottom: $gutterWidth + px; }

@function gridUnitWidthPercent($columns) {
  @return ($columns * $columnWidthPercent) + (($columns - 1) * $gutterWidthPercent);
}

/*------------------------------
  Column Widths
------------------------------*/

@for $columnNo from 1 through $totalColumns {
  .n#{$columnNo}.columns {
    width: gridUnitWidthPercent($columnNo);
  }
}

/*------------------------------
  Offsets
------------------------------*/

@for $columnNo from 1 through $totalColumns {
  .offset-by-n#{$columnNo} {
    margin-left: gridUnitWidthPercent($columnNo)  + ($gutterWidthPercent*1.5);
  }
}

/*------------------------------
  Nested Columns
------------------------------*/

@function nestedMultiplier($columns) {
  @return $maxWidth / ( ($columns * $columnWidth) + ( ($columns - 1) * $gutterWidth ) );
}

@for $columnNo from 2 through $totalColumns {
  .n#{$columnNo}.columns {
    .column, .columns {
      margin-left:  ($gutterWidthPercent / 2) * nestedMultiplier($columnNo);
      margin-right: ($gutterWidthPercent / 2) * nestedMultiplier($columnNo);
    }
    @for $nestedColumn from 1 through ($columnNo - 1) {
      .n#{$nestedColumn}.columns { 
        width: gridUnitWidthPercent($nestedColumn) * nestedMultiplier($columnNo);
      }
    }
  }
}

/*------------------------------
  Responsive Grid
------------------------------*/

@media only screen and (max-width: 750px) {

.container { max-width: 390px; }

  .column, .columns, .columns .columns, .columns .column { 
    float: none;
    display: block;
    width: auto !important;
    margin: 0 10px !important;
  }

  @for $columnNo from 1 through $totalColumns {
    .offset-by-n#{$columnNo} {
      margin-left: 10px;
    }
  }
  
  /*------------------------------
    Mobile Column Widths
  ------------------------------*/

  @for $columnNo from 1 through $totalColumns {
    .n#{$columnNo}-mobile.columns {
      width: gridUnitWidthPercent($columnNo) !important;
      float: left;
      *display: inline;
      margin: 0 ($gutterWidthPercent / 2) !important;
    }
  }

}

@mixin breakpoint($point) {
  @if $point == desktop {
    @media (min-width: $maxWidth + ($gutterWidth*2) + px ) { @content ; }
  }
  @else if $point == laptop {
    @media (max-width: $maxWidth + ($gutterWidth*2) + px ) { @content ; }
  }
  @else if $point == tablet {
    @media (max-width: 960px)  { @content ; }
  }
  @else if $point == mobile {
    @media (max-width: 768px)  { @content ; }
  }
  @else {
    @media (max-width: $point) { @content ; }
  }
}